// -*- mode: c++ -*-
#ifndef __IMP_WAD__45443636
#define __IMP_WAD__45443636

#include <imp/Prelude>
#include <imp/util/Optional>

namespace imp {
  namespace wad {
    enum struct Section;
    struct Lump;
    class LumpIterator;

    bool mount(StringView path);

    void merge();

    bool have_lump(StringView name);

    Optional<Lump> find(StringView name);

    Optional<Lump> find(std::size_t index);

    LumpIterator section(Section s);

    class LumpHash {
        uint32 hash_ {};

    public:
        LumpHash() = default;

        LumpHash(LumpHash&&) = default;

        LumpHash(const LumpHash&) = default;

        LumpHash(StringView str):
            hash_(1315423911)
        {
            for (int i = 0; i < 8 && str[i]; ++i) {
                int c = str[i];
                hash_ ^= (hash_ << 5) + std::toupper(c) + (hash_ >> 2);
            }
            hash_ &= 0xffff;
        }

        LumpHash(uint32 hash):
            hash_(hash) {}

        uint32 get() const
        { return hash_; }

        LumpHash& operator=(LumpHash&&) = default;

        LumpHash& operator=(const LumpHash&) = default;

        bool operator<(LumpHash other) const
        { return hash_ < other.hash_; }
    };

    enum struct Section {
        normal,
        textures,
        graphics,
        sprites,
        sounds
    };

    struct Lump {
        String name;
        SharedPtr<char> data {};
        std::size_t size {};
        std::size_t index {};
        std::size_t section_index {};
        Section section {};

        Lump() = default;

        Lump(Lump&&) = default;

        Lump(const Lump&) = default;

        Lump(String name, SharedPtr<char> data, std::size_t size, Section section):
            name(name),
            data(data),
            size(size),
            section(section) {}

        Lump& operator=(Lump&&) = default;

        Lump& operator=(const Lump&) = default;
    };

    struct LumpIterator {
        Lump lump_ {};
        std::size_t index_;
        std::size_t begin_;
        std::size_t end_;

    public:
        LumpIterator(std::size_t begin, std::size_t end);

        std::size_t size() const
        { return end_ - begin_; }

        const Lump &operator*() const
        { return lump_; }

        const Lump *operator->() const
        { return &lump_; }

        operator bool() const
        { return index_ < end_; }

        bool operator!() const
        { return !(index_ < end_); }

        LumpIterator& operator++();

        const Lump& operator[](std::size_t);
    };
  }

  inline StringView to_string(wad::Section s)
  {
      using Section = wad::Section;
      switch (s) {
      case Section::normal:
          return "normal"_sv;

      case Section::textures:
          return "textures"_sv;

      case Section::graphics:
          return "graphics"_sv;

      case Section::sprites:
          return "sprites"_sv;

      case Section::sounds:
          return "sounds"_sv;
      }
  }
}

#endif //__IMP_WAD__45443636
