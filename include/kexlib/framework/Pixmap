#pragma once

#include <Kexdef>
#include <framework/Pixel>

namespace kex {
namespace gfx {

template<PixelFormat _T, PixelFormat _U = _T>
class PixmapMap;

class Pixmap {
    PixelFormat mFormat;

    uint8_t *mPixels;
    size_t mWidth;
    size_t mHeight;

public:
    /*!
     * \brief Initialise an empty Pixmap object
     */
    Pixmap();

    /*!
     * \brief Move constructor
     * \remark The moved object may not be used after this call
     */
    Pixmap(Pixmap &&);

    /*!
     * \brief Copy constructor
     * \remark This doesn't use CoW, so it actually does copy the entire buffer
     */
    Pixmap(const Pixmap &);

    Pixmap(size_t width, size_t height, PixelFormat format);

    ~Pixmap();

    /*!
     * \brief Empty the object and free the buffer
     */
    void reset();

    /*!
     * \brief
     * \return this
     */
    Pixmap &operator=(const Pixmap &);

    /*!
     * \brief
     * \return this
     */
    Pixmap &operator=(Pixmap &&);

    /*!
     * \brief Get a pointer to the beginning of line yIndex
     * \param yIndex The index of the line to get
     * \return Pointer to the beginning of the scanline
     */
    uint8_t *scanline(size_t yIndex);

    /*!
     * \brief Get a const pointer to the beginning of the line yIndex
     * \param yIndex The index of the line to get
     * \return Const pointer to the beginning of the scanline
     */
    uint8_t const *scanline(size_t yIndex) const;

    const PixelTypeinfo &typeinfo() const;

    /*!
     * \return the pixmap width
     */
    auto width() const
    { return mWidth; }

    /*!
     * \return the pixmap height
     */
    auto height() const
    { return mHeight; }

    uint8_t *data()
    { return mPixels; }

    const uint8_t *data() const
    { return mPixels; }

    PixelFormat format() const
    { return mFormat; }

    template<PixelFormat _T, PixelFormat _U = _T>
    auto map()
    {
        if (mFormat != _T)
            throw std::exception();
        return PixmapMap<_T, _U>(*this);
    }

    Pixmap convert(PixelFormat convFormat) const;

    /*!
     * \brief Copy raw image data into a new Pixmap container
     * \param pxData
     * \param width
     * \param height
     * \param format
     * \return a new Pixmap object
     */
    static Pixmap from_data(const void *pxData, size_t width, size_t height, PixelFormat format);
};

template<PixelFormat _T, PixelFormat _U>
class PixmapMap {
    Pixmap &mPixmap;

public:
    using iterator_type = PixelIterator<_T, _U>;
    using reference_type = PixelReference<_T, _U>;

    PixmapMap(Pixmap &pPixmap) :
        mPixmap(pPixmap)
    {
    }

    size_t width() const
    { return mPixmap.width(); }

    size_t height() const
    { return mPixmap.height(); }

    uint8_t *data()
    { return mPixmap.data(); }

    uint8_t const *data() const
    { return mPixmap.data(); }

    PixelFormat format() const
    { return mPixmap.format(); }

    auto begin()
    { return iterator_type(data(), width(), 0, 0); }

    auto end()
    {
        return iterator_type(
            data() + width() * height() * mPixmap.typeinfo().bytes,
            width(), 0, width());
    }
};

} // namespace gfx
} // namespace kex
